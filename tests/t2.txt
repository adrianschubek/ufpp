\f[x,y]{add}{`$x + $y`}   x und y sind autoamtisch verfügbar in JS eval als $x und $y

\add{1}{2}  

mit ! always condition eval als JS 

\if!{x > 1 \a}{x ist größer als 1}{`a`x ist `yy` kleiner oder gleich 1}

init cond increment body
\loop!{1}{x > 0}{x--}{`x`}

\if!{x > 0}{
  \if!{x > 5}{
   blala \x
  }{}
}{
  oo
}
variable == function
define using existing stuff:
\f[name,value]{var!}{\${let $name = $value;}}
\var!{x}{val} ist gleiche wie function definition rewrite zu \f{x}{\${val}}

\f[name,value]{var}{\${let $name = `$value`;}}
\var{x}{val}  ist gleiche wie function definition rewrite zu \f{x}{val}

\x use (wie function)


\delvar{x}


\# \f[x,y]{add}{`$x + $y`}   x und y sind autoamtisch verfügbar in JS eval als $x und $y

\# h  \add{1}{4 +4123}   \#  \x \




\var{foo}{69}
\$foo

\halt

\f[a]{test}{
  Hallo \$a \$foo
  \f{love}{<3 }
  \love 
}
\test{Welt}

\var{aa}{69}
\$aa
\var{aa}{88}
\$aa

\test{}

\# 

\f[name,value]{var!}{
  \var{\$name}{\${$value}}
  \${$value}
  \toparent{$\$name}
  \$bb
  \tochild{$foo}
}   \# works but is in wrong scope defined (inner)

\# new command: \toparent{funcname} moves fun to parent scope

\var!{bb}{2+3}

\$bb
\del{$bb}

